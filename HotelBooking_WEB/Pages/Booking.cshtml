@page
@model HotelBooking_WEB.Pages.BookingModel

@{
    ViewData["Title"] = "Бронирование";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg=="
      crossorigin="anonymous" referrerpolicy="no-referrer" />

<div class="container py-5">
    <h1 class="text-center mb-4" style="color: #1a73e8;">Бронирование номера</h1>

    @if (Model.Room != null)
    {
        <div class="card shadow room-details-card">
            <div class="row g-0">
                <div class="col-md-6">
                    <div class="room-image-container">
                        @if (Model.Room.RoomImages != null && Model.Room.RoomImages.Any())
                        {
                            <img id="roomImage" src="@Model.Room.RoomImages.First().ImageUrl" class="img-fluid rounded-start"
                                 alt="@Model.Room.RoomName" style="cursor: pointer;">
                        }
                        else
                        {
                            <img id="roomImage" src="/images/Default.png" class="img-fluid rounded-start"
                                 alt="Номер без фото" style="cursor: pointer;">
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card-body">
                        <h2 class="card-title">@Model.Room.RoomName</h2>
                        <p class="card-text">@Model.Room.Description</p>
                        <p class="card-text">
                            <i class="fa fa-users me-2"></i>
                            Вместимость: @Model.Room.Capacity человек
                        </p>
                        <p class="card-text">
                            <i class="fa fa-money-bill-wave me-2"></i>
                            Цена за ночь: @Model.Room.PricePerNight.ToString("C")
                        </p>

                        <form method="post">
                            <input type="hidden" asp-for="RoomId" value="@Model.Room.Id" />
                            <input type="hidden" asp-for="UserId" value="1" />
                            <input type="hidden" asp-for="TotalPrice" id="totalPrice" value="0" />

                            <div class="mb-3">
                                <label for="checkInDate" class="form-label">Дата заезда:</label>
                                <input type="date" class="form-control" id="checkInDate" asp-for="CheckInDate" required>
                            </div>
                            <div class="mb-3">
                                <label for="checkOutDate" class="form-label">Дата выезда:</label>
                                <input type="date" class="form-control" id="checkOutDate" asp-for="CheckOutDate" required>
                            </div>

                            <p id="totalPriceInfo"></p>

                            <button type="submit" class="btn btn-primary book-btn">
                                <i class="fa fa-calendar-check me-2"></i>
                                Забронировать
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Комментарии -->
@*         <div class="mt-5">
            <h3>Комментарии</h3>
            <p>Комментариев пока нет.</p>
            <!-- Добавьте форму для добавления комментариев здесь -->
        </div> *@
    }
    else
    {
        <h2 class="text-center mb-4" style="color: #1a73e8;">Номер не найден.</h2>
    }
</div>

<style>
    .room-details-card {
        border-radius: 15px;
        overflow: hidden;
    }

    .room-image-container {
        height: 400px;
        overflow: hidden;
    }

        .room-image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

    .room-details-card:hover .room-image-container img {
        transform: scale(1.1);
    }

    .book-btn {
        width: 100%;
        transition: background-color 0.3s ease;
    }

        .book-btn:hover {
            background-color: #0056b3;
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const checkInDateInput = document.getElementById('checkInDate');
        const checkOutDateInput = document.getElementById('checkOutDate');
        const totalPriceInfo = document.getElementById('totalPriceInfo');
        const totalPriceInput = document.getElementById('totalPrice');
        const roomPricePerNight = parseFloat("@Html.Raw(Model.Room.PricePerNight.ToString())");

        const bookedDates = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BookedDates));

        // Set initial date
        let today = new Date();
        let formattedDateIn = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        checkInDateInput.setAttribute('min', today.toISOString().split('T')[0]);
        checkInDateInput.value = formattedDateIn;

        let tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
        let formattedDateOut = `${tomorrow.getFullYear()}-${String(tomorrow.getMonth() + 1).padStart(2, '0')}-${String(tomorrow.getDate()).padStart(2, '0')}`;
        checkOutDateInput.setAttribute('min', tomorrow.toISOString().split('T')[0]);
        checkOutDateInput.value = formattedDateOut;

        checkInDateInput.addEventListener('keydown', function (event) {
            event.preventDefault();
        });
        checkOutDateInput.addEventListener('keydown', function (event) {
            event.preventDefault();
        });

@*         // Blocker Booked Dates
        checkInDateInput.addEventListener('change', function () {
            const selectedDate = this.value;
            if (bookedDates.includes(selectedDate)) {
                alert('Выбранная дата уже забронирована. Пожалуйста, выберите другую дату.');
                this.value = ''; // Reset the date
                totalPriceInfo.innerText = '';
                totalPriceInput.value = 0;
                return;
            }

        });
        checkOutDateInput.addEventListener('change', function () {
            const selectedDate = this.value;
            if (bookedDates.includes(selectedDate)) {
                alert('Выбранная дата уже забронирована. Пожалуйста, выберите другую дату.');
                this.value = ''; // Reset the date
                totalPriceInfo.innerText = '';
                totalPriceInput.value = 0;
                return;
            }

            updateTotalPriceInfo();
        }); *@

        // Update total price and set minimum checkOutDate
        checkInDateInput.addEventListener('change', function () {
            const checkInDate = new Date(this.value);
            if (checkOutDateInput) {
                const minCheckOutDate = new Date(checkInDate);
                minCheckOutDate.setDate(minCheckOutDate.getDate() + 1); // At least the next day
                checkOutDateInput.setAttribute('min', minCheckOutDate.toISOString().split('T')[0]);

                if (checkOutDateInput.value && new Date(checkOutDateInput.value) < minCheckOutDate) {
                    checkOutDateInput.value = '';
                }

                updateTotalPriceInfo();
            }
        });

        checkOutDateInput.addEventListener('change', function () {
            const checkOutDate = new Date(this.value);
            if (checkInDateInput) {
                const maxCheckInDate = new Date(checkOutDate);
                maxCheckInDate.setDate(maxCheckInDate.getDate() - 1);
                checkInDateInput.setAttribute('max', maxCheckInDate.toISOString().split('T')[0]);

                updateTotalPriceInfo();
            }
        });

        function updateTotalPriceInfo() {
            if (checkInDateInput.value && checkOutDateInput.value) {
                const checkInDate = new Date(checkInDateInput.value);
                const checkOutDate = new Date(checkOutDateInput.value);
                const nightsCount = Math.round((checkOutDate - checkInDate) / (1000 * 3600 * 24));

                let totalPrice = nightsCount * roomPricePerNight;

@*                 // Check that a period isn't booked
                let currentDate = new Date(checkInDate);
                while (currentDate < checkOutDate) {
                    let formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;
                    if (bookedDates.includes(formattedDate)) {
                        totalPrice = 0; // Reset the price if unavailable days
                        break;
                    }
                    currentDate.setDate(currentDate.getDate() + 1);
                } *@

                totalPriceInfo.innerText = `Общая стоимость проживания: ${totalPrice.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' })}`;
                totalPriceInput.value = totalPrice;

            } else {
                totalPriceInfo.innerText = '';
                totalPriceInput.value = 0;
            }
        }

        updateTotalPriceInfo();

        const roomImage = document.getElementById('roomImage');
        const roomImages = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Room?.RoomImages?.Select(img => img.ImageUrl).ToList()));
        let currentImageIndex = 0;

        if (roomImage && roomImages && roomImages.length > 0) {
            roomImage.addEventListener('click', function () {
                currentImageIndex = (currentImageIndex + 1) % roomImages.length;
                roomImage.src = roomImages[currentImageIndex];
            });
        }
    });
</script>
