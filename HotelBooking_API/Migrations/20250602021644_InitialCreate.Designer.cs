// <auto-generated />
using System;
using HotelBooking_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelBooking_API.Migrations
{
    [DbContext(typeof(HBContext))]
    [Migration("20250602021644_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Современный 5G интернет",
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Личная кухня и первоклассные повара",
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Прекрасная парковка на 2 машины",
                            Name = "Парковка"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInDate = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 1,
                            Status = "Confirmed",
                            TotalPrice = 10000,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckInDate = new DateTimeOffset(new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 2,
                            Status = "Pending",
                            TotalPrice = 20000,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 5,
                            Text = "Отличный отель! Всем рекомендую.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 4,
                            Text = "Хороший сервис, но дорогой мини-бар.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 3,
                            Text = "Усталый номер, требует ремонта.",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Сервис для бронирования отелей",
                            Email = "HotelBooking@mail.ru",
                            LegalAddress = "Тверская ул., 6с, Москва, 125009, Россия",
                            LogoUrl = "https://www.HotelBooking/Logo.svg.png",
                            Name = "Hotel Booking",
                            Phone = "+79645873664",
                            TaxId = "US-517351059",
                            Website = "https://www.HotelBooking.ru"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Международная сеть отелей класса люкс, основанная в 1919 году",
                            Email = "corporate@hilton.com",
                            LegalAddress = "7930 Jones Branch Dr, McLean, VA 22102, США",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Hilton_Logo_2019.svg/1200px-Hilton_Logo_2019.svg.png",
                            Name = "Hilton Worldwide",
                            Phone = "+1 800 445 8667",
                            TaxId = "US-123456789",
                            Website = "https://www.hilton.com"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Крупнейшая гостиничная сеть мира, управляющая более чем 8000 объектами",
                            Email = "info@marriott.com",
                            LegalAddress = "10400 Fernwood Rd, Bethesda, MD 20817, США",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Marriott_International_logo_2019.svg/1280px-Marriott_International_logo_2019.svg.png",
                            Name = "Marriott International",
                            Phone = "+1 301 380 3000",
                            TaxId = "US-987654321",
                            Website = "https://www.marriott.com"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Французская гостиничная группа, управляющая брендами Sofitel, Novotel, Ibis",
                            Email = "contact@accor.com",
                            LegalAddress = "82 rue Henri Farman, 92130 Issy-les-Moulineaux, Франция",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Accor_logo_2022.svg/1280px-Accor_logo_2022.svg.png",
                            Name = "Accor Group",
                            Phone = "+33 1 45 38 86 00",
                            TaxId = "FR-789123456",
                            Website = "https://group.accor.com"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Крупнейшая российская гостиничная сеть, основанная в 2010 году",
                            Email = "info@azimuthotels.com",
                            LegalAddress = "125040, Москва, Ленинградский проспект, 36",
                            LogoUrl = "https://www.azimuthotels.com/local/templates/azimuth_main/img/logo.svg",
                            Name = "Азимут Отели Россия",
                            Phone = "+7 495 225 25 25",
                            TaxId = "RU-1234567890",
                            Website = "https://www.azimuthotels.com"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Российская гостиничная управляющая компания",
                            Email = "booking@cosmos-hotel.com",
                            LegalAddress = "150040, Ярославль, ул. Комсомольская, 2",
                            LogoUrl = "https://cosmos-hotel.com/local/templates/cosmos/img/logo.svg",
                            Name = "Cosmos Hotel Group",
                            Phone = "+7 495 785 45 45",
                            TaxId = "RU-0987654321",
                            Website = "https://cosmos-hotel.com"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Москва, ул. Тверская, 15",
                            City = "Москва",
                            CompanyId = 1,
                            Description = "Grand Royal Hotel - это идеальное место для тех, кто ценит комфорт и высокий уровень сервиса.  \r\n                                    Расположенный в самом сердце Москвы, отель предлагает просторные номера с современным дизайном и всеми необходимыми удобствами.  \r\n                                    Гости могут насладиться панорамным видом на город из ресторанов на крыше и расслабиться в спа-центре с бассейном и сауной.  \r\n                                    Для деловых путешественников доступны конференц-залы с современным оборудованием.  \r\n                                    Отель также предлагает фитнес-зал, круглосуточную службу консьержа и бесплатный Wi-Fi по всей территории.  \r\n                                    Рядом находятся главные достопримечательности Москвы, включая Красную площадь и Большой театр, что делает Grand Royal отличным выбором как для туристов, так и для бизнесменов.",
                            ImageUrl = "HotelPhoto.png",
                            Name = "Grand Royal Hotel",
                            Rating = 4.7m
                        },
                        new
                        {
                            Id = 2,
                            Address = "Уфа, ул. Ленина, 45",
                            City = "Уфа",
                            CompanyId = 2,
                            Description = "Comfort Inn Ufa - уютный и доступный отель, расположенный в живописном районе Уфы.  \r\n                                    Отель предлагает чистые и светлые номера с необходимым набором удобств для комфортного проживания.  \r\n                                    Завтрак включён в стоимость и подаётся в просторном зале с панорамными окнами.  \r\n                                    Гости могут воспользоваться бесплатной парковкой и круглосуточной рецепцией.  \r\n                                    Рядом с отелем находится несколько кафе и магазинов, а до центра города легко добраться на общественном транспорте.  \r\n                                    Comfort Inn Ufa - отличный выбор для тех, кто ищет спокойствие и удобство по разумной цене.",
                            ImageUrl = "Premium.png",
                            Name = "Comfort Inn Ufa",
                            Rating = 4.0m
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomName");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            Count = 3,
                            Description = "Обычный номер, предоставляющий всё необходимое",
                            HotelId = 1,
                            PricePerNight = 5000m,
                            RoomName = "Стандарт"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            Count = 1,
                            Description = "Для самых требовательных гостей",
                            HotelId = 1,
                            PricePerNight = 10000m,
                            RoomName = "Люкс"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 1,
                            Count = 4,
                            Description = "Выбор для самых экономных граждан",
                            HotelId = 2,
                            PricePerNight = 2000m,
                            RoomName = "Эконом"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            Count = 2,
                            Description = "Классический номер, оформленный в стиле сети отелей",
                            HotelId = 2,
                            PricePerNight = 3000m,
                            RoomName = "Классика"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("RoomAmenity");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 2,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 3,
                            Id = 0
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "test1.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "test2.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "test3.png",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "test4.png",
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "qwe@mail.ru",
                            FirstName = "qwe",
                            LastName = "qwe",
                            PasswordHash = new byte[] { 113, 119, 101, 113, 119, 101 },
                            Phone = "+79172227890",
                            SecondName = "qwe"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            Email = "asd@mail.ru",
                            FirstName = "asd",
                            LastName = "asd",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+79172227890",
                            SecondName = "asd"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            Email = "ivan@example.com",
                            FirstName = "Иван",
                            LastName = "Иванович",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+7 123 456 7890",
                            SecondName = "Иванов"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            Email = "marias@example.com",
                            FirstName = "Мария",
                            LastName = "Николаевна",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+7 987 654 3210",
                            SecondName = "Петрова"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Comment", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Hotel", "Hotel")
                        .WithMany("Comments")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Company", "Company")
                        .WithMany("Hotels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Company", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
