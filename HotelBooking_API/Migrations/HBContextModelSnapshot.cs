// <auto-generated />
using System;
using HotelBooking_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelBooking_API.Migrations
{
    [DbContext(typeof(HBContext))]
    partial class HBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Бесплатный интернет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Парковка"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Подходит для детей"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Кондиционер"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Разрешено с домашними животными"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Круглосуточная стойка регистрации"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Места для курения"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Отопление"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Стиральная машина"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Терраса"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ранняя регистрация заезда"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Поздняя регистрация выезда"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Индивидуальная регистрация заезда и отъезда"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Люкс для новобрачных"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Номера для некурящих"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Холодильник"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Семейные номера"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Кабельное телевидение"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Гладильные принадлежности"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Фен (по запросу)"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Кухня"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Микроволновая печь"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Бесплатный Wi-Fi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Бесплатная парковка"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Размещение подходит для семей/детей"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Размещение с домашними животными"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Оплачивается отдельно"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Температурный контроль для персонала"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Индивидуальные средства защиты для персонала"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Усиленные меры дезинфекции"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Температурный контроль для гостей"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 1,
                            Status = "Подтверждено",
                            TotalPrice = 10000,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 2,
                            Status = "Отменено",
                            TotalPrice = 20000,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 3,
                            Status = "Завершено",
                            TotalPrice = 30000,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 4,
                            Status = "Активно",
                            TotalPrice = 25000,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 5,
                            Status = "Ожидание",
                            TotalPrice = 28000,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 6,
                            Status = "Завершено",
                            TotalPrice = 22000,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 7,
                            Status = "Активно",
                            TotalPrice = 18000,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 8,
                            Status = "Ожидание",
                            TotalPrice = 21000,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 9,
                            Status = "Отменено",
                            TotalPrice = 17000,
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            CheckInDate = new DateTimeOffset(new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2025, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 10,
                            Status = "Активно",
                            TotalPrice = 24000,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 5,
                            Text = "Отличный номер, очень уютно и чисто!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 4,
                            Text = "Прекрасный вид из окна, но немного шумно ночью.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 5,
                            Text = "Персонал очень вежливый, номер полностью соответствует описанию.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 3,
                            Text = "Неплохой номер, но хотелось бы обновить мебель.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 1,
                            Rating = 4,
                            Text = "Хорошее соотношение цены и качества.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 5,
                            Text = "Очень комфортный номер, рекомендую для деловых поездок.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 4,
                            Text = "Хорошее расположение и чистота.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 3,
                            Text = "Номер небольшой, но уютный.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 5,
                            Text = "Отличный сервис и удобства.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 2,
                            Rating = 4,
                            Text = "Приятный номер, но хотелось бы больше освещения.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 3,
                            Rating = 4,
                            Text = "Хороший номер, всё необходимое под рукой.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 4,
                            Rating = 3,
                            Text = "Номер простой, но чистый.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 5,
                            Rating = 5,
                            Text = "Очень понравился дизайн номера и удобства.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 6,
                            Rating = 4,
                            Text = "Хороший номер, но немного шумно с улицы.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 7,
                            Rating = 5,
                            Text = "Отличное соотношение цена-качество.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            HotelId = 8,
                            Rating = 4,
                            Text = "Уютный номер, рекомендую.",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Сервис для бронирования отелей",
                            Email = "HotelBooking@mail.ru",
                            LegalAddress = "Тверская ул., 6с, Москва, 125009, Россия",
                            LogoUrl = "https://www.HotelBooking/Logo.svg.png",
                            Name = "Hotel Booking",
                            Phone = "+79645873664",
                            TaxId = "US-517351059",
                            Website = "https://www.HotelBooking.ru"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Международная сеть отелей класса люкс, основанная в 1919 году",
                            Email = "corporate@hilton.com",
                            LegalAddress = "7930 Jones Branch Dr, McLean, VA 22102, США",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Hilton_Logo_2019.svg/1200px-Hilton_Logo_2019.svg.png",
                            Name = "Hilton Worldwide",
                            Phone = "+1 800 445 8667",
                            TaxId = "US-123456789",
                            Website = "https://www.hilton.com"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Современный отель в центре Уфы с комфортабельными номерами",
                            Email = "ufa@azimuthotels.com",
                            LegalAddress = "Проспект Октября, 81, Уфа, Башкортостан, Россия",
                            LogoUrl = "https://azimuthotels.com/local/templates/azimuth2016/img/logo_new_azimuth.svg",
                            Name = "Отель Азимут Уфа",
                            Phone = "+7 (347) 295-90-00",
                            TaxId = "RU-987654321",
                            Website = "https://azimuthotels.com/Russia/ufa"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Премиальный отель в Уфе с широким спектром услуг и удобств",
                            Email = "info.ufa@crowneplaza.com",
                            LegalAddress = "ул. Цюрупы, 7, Уфа, Башкортостан, Россия",
                            LogoUrl = "https://www.ihg.com/content/dam/ihg/logos/brands/cp_rgb.png",
                            Name = "Crowne Plaza Ufa",
                            Phone = "+7 (347) 286-50-00",
                            TaxId = "RU-112233445",
                            Website = "https://ufa.crowneplaza.com/"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Тверская, 15",
                            City = "Москва",
                            CompanyId = 2,
                            Description = "Grand Royal Hotel - это идеальное место для тех, кто ценит комфорт и высокий уровень сервиса. Расположенный в самом сердце \r\n                                    Москвы, отель предлагает просторные номера с современным дизайном и всеми необходимыми удобствами. Гости могут насладиться \r\n                                    панорамным видом на город из ресторанов на крыше и расслабиться в спа-центре с бассейном и сауной. Для деловых \r\n                                    путешественников доступны конференц-залы с современным оборудованием. Отель также предлагает фитнес-зал, круглосуточную \r\n                                    службу консьержа и бесплатный Wi-Fi по всей территории. Рядом находятся главные достопримечательности Москвы, включая \r\n                                    Красную площадь и Большой театр, что делает Grand Royal отличным выбором как для туристов, так и для бизнесменов.",
                            ImageUrl = "https://cf.bstatic.com/xdata/images/hotel/max1024x768/483452095.jpg?k=6bcbc9f9509821add5c51d951a4e6d837eab8d326154142bedb0f20fb4a5c333&o=",
                            Name = "Grand Royal Hotel",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 2,
                            Address = "Уфа, ул. Ленина, 45",
                            City = "Уфа",
                            CompanyId = 2,
                            Description = "Comfort Inn Ufa - уютный и доступный отель, расположенный в живописном районе Уфы. Отель предлагает чистые и светлые номера\r\n                                    с необходимым набором удобств для комфортного проживания. Завтрак включён в стоимость и подаётся в просторном зале с \r\n                                    панорамными окнами. Гости могут воспользоваться бесплатной парковкой и круглосуточной рецепцией. Рядом с отелем находится \r\n                                    несколько кафе и магазинов, а до центра города легко добраться на общественном транспорте. Comfort Inn Ufa - отличный \r\n                                    выбор для тех, кто ищет спокойствие и удобство по разумной цене.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/9e/51/9e51944fa5956df322cc10fce8156e0bcd940280.jpeg",
                            Name = "Comfort Inn Ufa",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 3,
                            Address = "Черниковская улица, д.51",
                            City = "Уфа",
                            CompanyId = 2,
                            Description = "Общая кухня оборудована для самостоятельного приготовления пищи. На территории работает бесплатный Wi-Fi. \r\n                                    Уточняйте информацию сразу при заезде. Специально для автопутешественников организована бесплатная парковка. \r\n                                    Дополнительно: гладильные услуги. Персонал отеля говорит на русском.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/ef/a2/efa2fd8ad78697669e4dc12d2d47f052b377f6b8.jpeg",
                            Name = "Малый отель на Черниковской",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 4,
                            Address = "пр-т Октября, д. 81",
                            City = "Уфа",
                            CompanyId = 3,
                            Description = "В ресторане отеля сервируется завтрак в формате «шведский стол». В течение дня гости могут заказать различные блюда и напитки \r\n                                    по меню a la carte, также доступна услуга обслуживания номеров. В лобби-баре, расположенном на 1 этаже отеля гости \r\n                                    могут приобрести лёгкие закуски, снеки и напитки. Лобби-бар работает круглосуточно.Персонал круглосуточной стойки \r\n                                    регистрации поможет с заказом такси и трансфером.На всей территории отеля доступен бесплатный Wi-Fi.К услугам гостей \r\n                                    бесплатная парковка и услуги прачечной за дополнительную плату.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/11/d0/11d0ed32b250489fd79a224237bf2662c3d7cf3c.JPEG",
                            Name = "AZIMUT Сити Отель Уфа",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 5,
                            Address = "Карла Маркса, д.25",
                            City = "Уфа",
                            CompanyId = 3,
                            Description = "Скоротать вечер или приятно провести время перед сном в уютной атмосфере можно в баре. Для гостей работает ресторан. Попробуйте кофе в кафе — вдруг именно он станет лучшим в городе? На территории работает бесплатный Wi-Fi. Уточняйте информацию сразу при заезде.\r\n                                    Специально для автопутешественников организована парковка. Любителям спорта подготовили фитнес-центр и тренажёрный зал. Для участников деловых встреч предусмотрен бизнес-центр. Если планируете экскурсии, обратите внимание на экскурсионное бюро отеля.\r\n                                    Сотрудники отеля по запросу организуют гостям трансфер. Удобно для гостей с ограниченными возможностями: на верхние этажи гостей поднимает лифт. Гостям доступны и другие услуги. Например, прачечная, химчистка, банк, банкомат, индивидуальная регистрация заезда и отъезда, гладильные услуги, пресса, сейф и консьерж. Сотрудники отеля поддержат беседу на английском и русском.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/20/03/2003356e1fefe82372bff783f6d2d550b12b9ccd.jpeg",
                            Name = "Отель Уфа-Астория",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 6,
                            Address = "Камышлинская 61д",
                            City = "Уфа",
                            CompanyId = 3,
                            Description = "Место, куда приятно возвращаться после долгих прогулок. Гостевой дом «Маракеш» располагается в Уфе. Этот гостевой дом находится в 5 км от центра города. Рядом с гостевым домом можно прогуляться. Неподалёку: Парк им. Ивана Якутова, Памятник Салавату Юлаеву и Национальный музей Башкортостана.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/ee/b0/eeb0e2ad0ad14a84a82a3b586d6e78484c1f18ce.jpeg",
                            Name = "Отель Маракеш",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 7,
                            Address = "Цюрупы, д.7",
                            City = "Уфа",
                            CompanyId = 4,
                            Description = "Скоротать вечер или приятно провести время перед сном в уютной атмосфере можно в баре. Время вспомнить о хлебе насущном! Для гостей работает ресторан. На территории работает бесплатный Wi-Fi. Уточняйте информацию сразу при заезде. Для путешественников на машине организована платная парковка.\r\n                                    Гостям также доступны следующие услуги: сауна, спа-центр и баня. Спортивные гости оценят фитнес-центр и тренажёрный зал. Для участников деловых встреч предусмотрен бизнес-центр. Доступная среда: работает лифт.\r\n                                    Дополнительно: прачечная, банкомат, гладильные услуги, пресса и консьерж.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/ca/1f/ca1fa04c7aa3ced83a8dd7fab0517845867c8706.JPEG",
                            Name = "Отель SheratonPlaza Ufa Congress Hotel",
                            Rating = 0m
                        },
                        new
                        {
                            Id = 8,
                            Address = "Белоозёрская, д.74",
                            City = "Уфа",
                            CompanyId = 4,
                            Description = "Меняем стандартную обстановку отеля на домашний уют! Мини-отель «Мини-Отель Европа» находится в Уфе. Этот мини-отель располагается в 15 км от центра города. Рядом с мини-отелем — Парк Первомайский, Парк Кашкадан и Парк Победы.",
                            ImageUrl = "https://cdn.worldota.net/t/640x400/extranet/f6/d3/f6d3dc84d101242660b0667f63fe00edcac73461.jpeg",
                            Name = "Мини-Отель Европа",
                            Rating = 0m
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomName");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            Count = 3,
                            Description = "Превосходный выбор для двоих: здесь есть всё для отдыха и работы.",
                            HotelId = 1,
                            PricePerNight = 4800m,
                            RoomName = "Двухместный Полулюкс «Комфорт»"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1,
                            Count = 2,
                            Description = "Уютное гнёздышко для тех, кто ценит функциональность и спокойствие.",
                            HotelId = 1,
                            PricePerNight = 3200m,
                            RoomName = "Одноместный Стандарт «Эконом»"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 4,
                            Count = 1,
                            Description = "Идеальное решение для семьи: много места и приятные детали для каждого.",
                            HotelId = 1,
                            PricePerNight = 7500m,
                            RoomName = "Семейный Люкс «Гармония»"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            Count = 4,
                            Description = "Надёжный выбор для тех, кто предпочитает проверенные решения и комфорт.",
                            HotelId = 1,
                            PricePerNight = 4000m,
                            RoomName = "Двухместный Стандарт «Классика»"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 2,
                            Count = 1,
                            Description = "Погрузитесь в атмосферу роскоши и забудьте обо всём, глядя на бескрайние волны.",
                            HotelId = 1,
                            PricePerNight = 9000m,
                            RoomName = "Люкс с видом на море «Романтика»"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 2,
                            Count = 2,
                            Description = "Насладитесь утренним кофе на свежем воздухе, не покидая номер.",
                            HotelId = 1,
                            PricePerNight = 4500m,
                            RoomName = "Стандарт с балконом «Свежесть»"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 1,
                            Count = 2,
                            Description = "Творческое пространство для вдохновения и отдыха.",
                            HotelId = 2,
                            PricePerNight = 3500m,
                            RoomName = "Студия «Арт»"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 2,
                            Count = 1,
                            Description = "Элегантный люкс для самых взыскательных гостей.",
                            HotelId = 3,
                            PricePerNight = 6000m,
                            RoomName = "Двухместный Люкс «Премиум»"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 4,
                            Count = 1,
                            Description = "Много места для всей семьи — комфорт гарантирован.",
                            HotelId = 4,
                            PricePerNight = 7000m,
                            RoomName = "Семейный номер «XL»"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 2,
                            Count = 1,
                            Description = "Всё необходимое для продуктивной работы и отдыха.",
                            HotelId = 5,
                            PricePerNight = 4000m,
                            RoomName = "Стандартный «Бизнес»"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 2,
                            Count = 1,
                            Description = "Погрузитесь в релакс: джакузи и премиальный сервис.",
                            HotelId = 6,
                            PricePerNight = 8500m,
                            RoomName = "Люкс с джакузи «SPA»"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 1,
                            Count = 1,
                            Description = "Компактный номер для тех, кто ценит мобильность.",
                            HotelId = 7,
                            PricePerNight = 3000m,
                            RoomName = "Одноместный «Мини»"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 2,
                            Count = 1,
                            Description = "Больше пространства и удобств для вашего отдыха.",
                            HotelId = 8,
                            PricePerNight = 4200m,
                            RoomName = "Двухместный «Комфорт+»"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("RoomAmenity");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 4,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 15,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 23,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 10,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 8,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 9,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 25,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 21,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 9,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 12,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 27,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 3,
                            AmenityId = 30,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 4,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 4,
                            AmenityId = 2,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 4,
                            AmenityId = 16,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 4,
                            AmenityId = 7,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 5,
                            AmenityId = 5,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 5,
                            AmenityId = 14,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 5,
                            AmenityId = 30,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 5,
                            AmenityId = 28,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 5,
                            AmenityId = 29,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 6,
                            AmenityId = 10,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 6,
                            AmenityId = 11,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 6,
                            AmenityId = 12,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 6,
                            AmenityId = 13,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 6,
                            AmenityId = 26,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 7,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 7,
                            AmenityId = 7,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 8,
                            AmenityId = 4,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 8,
                            AmenityId = 23,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 8,
                            AmenityId = 20,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 9,
                            AmenityId = 25,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 9,
                            AmenityId = 21,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 10,
                            AmenityId = 8,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 10,
                            AmenityId = 16,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 11,
                            AmenityId = 20,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 11,
                            AmenityId = 30,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 12,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 12,
                            AmenityId = 27,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 13,
                            AmenityId = 4,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 13,
                            AmenityId = 24,
                            Id = 0
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "RoomImg/test1.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "RoomImg/test2.png",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "RoomImg/test3.png",
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "RoomImg/test4.png",
                            RoomId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "RoomImg/test5.png",
                            RoomId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "RoomImg/test6.png",
                            RoomId = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "RoomImg/test7.png",
                            RoomId = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "RoomImg/test8.png",
                            RoomId = 8
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "RoomImg/test9.png",
                            RoomId = 9
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "RoomImg/test10.png",
                            RoomId = 10
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "RoomImg/test11.png",
                            RoomId = 11
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "RoomImg/test12.png",
                            RoomId = 12
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "RoomImg/test13.png",
                            RoomId = 13
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Sergei@mail.ru",
                            FirstName = "Сергей",
                            LastName = "Александрович",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+79172227890",
                            SecondName = "Иванов"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Ann@mail.ru",
                            FirstName = "Смирнова",
                            LastName = "Сергеевна",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+79177222780",
                            SecondName = "Анна"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ivan@mail.ru",
                            FirstName = "Иван",
                            LastName = "Иванович",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+71234567890",
                            SecondName = "Иванов"
                        },
                        new
                        {
                            Id = 4,
                            Email = "maria@mail.ru",
                            FirstName = "Мария",
                            LastName = "Николаевна",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+79876543210",
                            SecondName = "Петрова"
                        },
                        new
                        {
                            Id = 5,
                            Email = "Miha@gmail.com",
                            FirstName = "Андрей",
                            LastName = "Евгеньевич",
                            PasswordHash = new byte[] { 97, 115, 100, 97, 115, 100 },
                            Phone = "+79876543210",
                            SecondName = "Михайлов"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Comment", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Hotel", "Hotel")
                        .WithMany("Comments")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Company", "Company")
                        .WithMany("Hotels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Company", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
