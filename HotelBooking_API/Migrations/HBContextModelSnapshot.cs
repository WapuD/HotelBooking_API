// <auto-generated />
using System;
using HotelBooking_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelBooking_API.Migrations
{
    [DbContext(typeof(HBContext))]
    partial class HBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Современный 5G интернет",
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Личная кухня и первоклассные повара",
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Прекрасная парковка на 2 машины",
                            Name = "Парковка"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInDate = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 1,
                            Status = "Confirmed",
                            TotalPrice = 10000,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckInDate = new DateTimeOffset(new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CheckOutDate = new DateTimeOffset(new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoomId = 2,
                            Status = "Pending",
                            TotalPrice = 20000,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Москва, ул. Ленина, 10",
                            City = "Москва",
                            Description = "Отель Премиум",
                            ImageUrl = "Premium.png",
                            Name = "Отель Премиум",
                            Rating = 4.5m
                        },
                        new
                        {
                            Id = 2,
                            Address = "Санкт-Петербург, ул. Пушкина, 5",
                            City = "Санкт-Петербург",
                            Description = "Отель Эконом",
                            ImageUrl = "Ekonom.png",
                            Name = "Отель Эконом",
                            Rating = 3.8m
                        },
                        new
                        {
                            Id = 3,
                            Address = "Москва, ул. Ленина, 10",
                            City = "Москва",
                            Description = "Отель для деловых поездок с конференц-залом",
                            ImageUrl = "Business.png",
                            Name = "Отель Бизнес",
                            Rating = 4.2m
                        },
                        new
                        {
                            Id = 4,
                            Address = "Санкт-Петербург, Невский проспект, 20",
                            City = "Санкт-Петербург",
                            Description = "Роскошный отель с видом на город",
                            ImageUrl = "Grand.png",
                            Name = "Гранд Отель",
                            Rating = 4.8m
                        },
                        new
                        {
                            Id = 5,
                            Address = "Казань, ул. Речная, 15",
                            City = "Казань",
                            Description = "Отель с видом на реку, идеален для романтических поездок",
                            ImageUrl = "RiverView.png",
                            Name = "Отель на набережной",
                            Rating = 4.5m
                        },
                        new
                        {
                            Id = 6,
                            Address = "Сочи, ул. Морская, 30",
                            City = "Сочи",
                            Description = "Отель с детскими площадками и развлекательными программами",
                            ImageUrl = "Family.png",
                            Name = "Отель для семьи",
                            Rating = 4.1m
                        },
                        new
                        {
                            Id = 7,
                            Address = "Екатеринбург, ул. Ленина, 25",
                            City = "Екатеринбург",
                            Description = "Удобное расположение для туристов",
                            ImageUrl = "CityCenter.png",
                            Name = "Отель в центре города",
                            Rating = 4.0m
                        },
                        new
                        {
                            Id = 8,
                            Address = "Красная Поляна, ул. Горная, 10",
                            City = "Красная Поляна",
                            Description = "Отель для любителей активного отдыха",
                            ImageUrl = "Mountain.png",
                            Name = "Отель у горы",
                            Rating = 4.3m
                        },
                        new
                        {
                            Id = 9,
                            Address = "Анапа, ул. Пляжная, 5",
                            City = "Анапа",
                            Description = "Отель с прямым выходом на пляж",
                            ImageUrl = "Beach.png",
                            Name = "Отель на пляже",
                            Rating = 4.6m
                        },
                        new
                        {
                            Id = 10,
                            Address = "Ростов-на-Дону, ул. Старая, 20",
                            City = "Ростов-на-Дону",
                            Description = "Отель в историческом здании с уникальной атмосферой",
                            ImageUrl = "Historic.png",
                            Name = "Отель в историческом центре",
                            Rating = 4.4m
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 10000m,
                            BookingId = 1,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentMethod = "CreditCard"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 20000m,
                            BookingId = 2,
                            PaymentDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PaymentMethod = "PayPal"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomNumber");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            Description = "Обычный номер, предоставляющий всё необходимое",
                            HotelId = 1,
                            IsAvailable = true,
                            PricePerNight = 5000m,
                            RoomName = "Стандарт",
                            RoomNumber = "101"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            Description = "Для самых требовательных гостей",
                            HotelId = 1,
                            IsAvailable = true,
                            PricePerNight = 10000m,
                            RoomName = "Люкс",
                            RoomNumber = "102"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("RoomAmenity");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 1,
                            AmenityId = 2,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 1,
                            Id = 0
                        },
                        new
                        {
                            RoomId = 2,
                            AmenityId = 3,
                            Id = 0
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "test1.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "test2.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "test3.png",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "test4.png",
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ivan@example.com",
                            FirstName = "Иван",
                            LastName = "Иванович",
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Phone = "+7 123 456 7890",
                            SecondName = "Иванов"
                        },
                        new
                        {
                            Id = 2,
                            Email = "maria@example.com",
                            FirstName = "Мария",
                            LastName = "Николаевна",
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Phone = "+7 987 654 3210",
                            SecondName = "Петрова"
                        });
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Payment", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("HotelBooking_API.Data.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomAmenity", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.RoomImages", b =>
                {
                    b.HasOne("HotelBooking_API.Data.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Amenity", b =>
                {
                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("HotelBooking_API.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
